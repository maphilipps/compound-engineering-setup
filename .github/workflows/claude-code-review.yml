name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            Please review this pull request using our 4-criteria compound learning approach:

            ✅ **Correctness**: Are the changes logically sound and error-free?
            ✅ **Completeness**: Do the changes fully address all requirements?
            ✅ **Size**: Is the solution appropriately sized (not over/under-engineered)?
            ✅ **Trajectory**: How do the changes advance our compound learning goals?

            ## Compound Learning Code Review

            ### 1. 4-Criteria Analysis
            - **Correctness**: Review code for logical errors, bugs, security vulnerabilities
            - **Completeness**: Verify all requirements are met, edge cases handled, tests included
            - **Size**: Assess if the solution is right-sized - not over-complex or oversimplified
            - **Trajectory**: Evaluate how changes build on existing knowledge and enable future development

            ### 2. Knowledge Integration
            - Reference CLAUDE.md standards and established patterns
            - Check alignment with existing ADRs and architectural decisions
            - Identify reusable patterns that should be captured as learnings
            - Assess contribution to organizational knowledge building

            ### 3. Compound Learning Opportunities
            - Look for patterns that could be documented with `/capture_learning`
            - Identify architectural decisions that warrant ADR documentation
            - Consider how changes enable future compound improvements
            - Evaluate knowledge transfer and team learning potential

            ### 4. Enhanced Review Focus
            - Code quality and adherence to established patterns
            - Security implications and attack surface analysis
            - Performance impact and scalability considerations  
            - Test coverage and quality of test scenarios
            - Documentation completeness and maintainability
            - Integration with existing systems and workflows

            ## Active Learning Capture

            After completing your review:

            1. **Capture Review Learnings**: If you found significant patterns, anti-patterns, or insights, use `/capture_learning pr-review-${{ github.event.pull_request.number }}` to document them
            
            2. **Check ADR Requirements**: Use `/adr_check` to determine if any architectural decisions in this PR warrant ADR documentation
            
            3. **Apply Failure Learning**: If you identified potential issues or anti-patterns, use `/learn_from_failure` to document prevention strategies
            
            4. **Link Knowledge**: Use `/adr_link` to connect new insights with relevant existing ADRs

            Use `gh pr comment` to post your comprehensive 4-criteria review as a PR comment, then execute the learning capture actions above.
          
          # Enable learning capture tools
          claude_args: '--allowed-tools "Read,Glob,Grep,LS,Bash(gh:*),Bash(git:*),Task"'

