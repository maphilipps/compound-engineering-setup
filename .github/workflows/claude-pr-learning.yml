name: Extract PR Learning Patterns
on:
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [closed]

jobs:
  extract-learning:
    if: github.event.pull_request.merged == true || github.event.review.state == 'changes_requested'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
      issues: read
      id-token: write
      actions: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Support for git worktrees - fetch all branches and refs
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          
      - name: Setup Git Worktree Support
        run: |
          # Configure git for worktree compatibility
          git config --global --add safe.directory '*'
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action - Compound Learning"
      
      - name: Extract Learning Patterns from PR
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            @claude Please analyze PR #${{ github.event.pull_request.number }} for compound engineering learning patterns, focusing on:

            ✅ **Correctness**: What made this solution logically sound and bug-free?
            ✅ **Completeness**: How were all requirements fully addressed?
            ✅ **Size**: Was the solution appropriately sized (not over/under-engineered)?
            ✅ **Trajectory**: How does this advance our compound learning goals?

            # Context Window Optimization Analysis
            
            ## Analysis Scope (Optimized for 4 Criteria)
            - **PR Changes**: Code changes with correctness/completeness validation
            - **Review Comments**: Feedback patterns affecting solution quality and size  
            - **Commit Messages**: Implementation trajectory and problem-solving approach
            - **Discussion**: Decision-making optimizing for the 4 criteria
            
            ## Learning Categories to Extract
            
            ### Error Patterns (Correctness/Completeness Focus)
            For each issue identified, analyze through 4-criteria lens:
            1. **Correctness Impact**: How did this error affect logical soundness?
            2. **Completeness Impact**: What requirements were missed or incomplete?
            3. **Size Impact**: Was this caused by over/under-engineering? 
            4. **Trajectory Impact**: How does fixing this advance compound learning?
            5. **Document** using error format, emphasizing 4-criteria analysis
            6. **Generate prevention rule** (<200 chars) optimized for all 4 criteria
            
            ### Success Patterns (4-Criteria Optimization)
            For effective solutions, document how they excel in:
            1. **Correctness Excellence**: What made the logic exceptionally sound?
            2. **Completeness Excellence**: How were requirements comprehensively addressed?
            3. **Size Excellence**: Perfect balance of engineering complexity?
            4. **Trajectory Excellence**: Significant compound learning advancement?
            5. **Extract** reusable patterns optimized for all 4 criteria
            
            ### Prevention Rules Generation (4-Criteria Focused)
            Create prevention rules that optimize for:
            - **Correctness**: Prevent logical errors and bugs
            - **Completeness**: Ensure full requirement coverage
            - **Size**: Maintain appropriate solution complexity
            - **Trajectory**: Advance compound learning goals
            Each rule <200 characters, addressing multiple criteria when possible
            
            ## Output Requirements
            
            ### 1. Error Documentation (if applicable)
            Create files following the standardized format:
            ```
            .claude/learning/errors/[category]/pr-${{ github.event.pull_request.number }}-[short-description].md
            ```
            
            ### 2. Success Pattern Documentation  
            ```
            .claude/learning/patterns/[category]/pr-${{ github.event.pull_request.number }}-[pattern-name].md
            ```
            
            ### 3. Prevention Rules Update
            Update `.claude/learning/prevention-rules/README.md` with new rules:
            ```
            **[CATEGORY]-[ID]**: [Rule text <200 chars] (Source: PR #${{ github.event.pull_request.number }})
            ```
            
            ### 4. Metrics Update
            Update `.claude/learning/metrics/velocity.json`:
            - Increment patterns_extracted count
            - Add new category breakdowns
            - Update learning velocity metrics
            
            ## Quality Guidelines
            - Only extract patterns with clear learning value
            - Ensure prevention rules are specific and actionable
            - Cross-reference with existing patterns to avoid duplication
            - Focus on patterns that can prevent future issues or accelerate development
            
            ## Process
            1. **Read PR details**: Title, description, changed files, commits (including worktree context)
            2. **Analyze review comments**: Look for patterns in feedback and issues identified
            3. **Examine code changes**: Identify what was fixed, improved, or implemented
            4. **Extract learnings**: Document according to categorization system with feedback codification
            5. **Generate prevention rules**: Create actionable rules from identified issues
            6. **Update tracking**: Increment metrics and cross-reference existing patterns
            7. **Codify all feedback**: Use @feedback-codifier to ensure all review feedback is captured
            8. **Document agent learnings**: Track which agents would have been effective for this work
            
            ## Feedback Codification Requirements
            - Codify ALL review comments into structured learning patterns
            - Extract reviewer preferences and team standards
            - Document effective/ineffective approaches identified in reviews
            - Generate prevention rules from all feedback patterns
            - Cross-reference with existing agent effectiveness data
            
            ## Worktree Considerations
            - Work with current worktree context and branch isolation
            - Consider parallel development implications in learning extraction
            - Document patterns that work well with worktree-based development
            
            Begin comprehensive analysis with full feedback codification now.
          
          claude_args: '--allowed-tools "Bash(git:*),Write,Edit,Read,Glob,Grep,MultiEdit,Bash(gh pr:*),Bash(gh issue:*)" --files **/*.{js,ts,tsx,jsx,php,py,go,rs,java,rb,swift,kt} --exclude node_modules/** vendor/** dist/** build/**'
            
      - name: Update Prevention Rules in CLAUDE.md
        if: success()
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            # Sync Prevention Rules to CLAUDE.md
            
            Read the updated prevention rules from `.claude/learning/prevention-rules/README.md` and sync them to the main `CLAUDE.md` file.
            
            ## Task
            1. **Read** current prevention rules from `.claude/learning/prevention-rules/README.md`
            2. **Update** the prevention rules section in `CLAUDE.md`
            3. **Maintain** existing CLAUDE.md structure and other content
            4. **Ensure** rules are categorized and easily readable
            
            ## Format in CLAUDE.md
            ```markdown
            ## Prevention Rules (Auto-Sync from Learning System)
            *Last updated: [current date]*
            
            ### Security Rules
            [List active security rules]
            
            ### Performance Rules  
            [List active performance rules]
            
            [Continue for all categories]
            ```
            
            Update CLAUDE.md now with the latest prevention rules.
            
            Use the Bash tool with git commands to commit and push your changes automatically.