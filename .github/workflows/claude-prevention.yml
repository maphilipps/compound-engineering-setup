name: Prevention Rule Validation
on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      rule_category:
        description: 'Validate specific category (security, performance, architecture, quality, testing, accessibility)'
        required: false
        default: 'all'

jobs:
  validate-prevention-rules:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: read
      id-token: write
      actions: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Comprehensive Prevention Rule Validation
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            @claude Please perform comprehensive prevention rule validation, optimizing for our 4 core criteria:

            ‚úÖ **Correctness**: Are prevention rules catching logical errors effectively?
            ‚úÖ **Completeness**: Do rules cover all requirement aspects thoroughly?
            ‚úÖ **Size**: Are rules appropriately scoped (not over/under-engineered)?
            ‚úÖ **Trajectory**: Do prevention outcomes advance compound learning goals?

            # Context Window Optimized Prevention Validation
            
            ## 4-Criteria Task Overview
            1. **Load Prevention Rules** and assess 4-criteria effectiveness
            2. **Validate Through Optimization Lens** (not just traditional categories)
            3. **Generate 4-Criteria Violation Reports** for issues found
            4. **Create Optimization Summary** with context window improvements
            5. **Update Metrics** tracking 4-criteria prevention success
            6. **Comment on PR** with 4-criteria validation results
            7. **Archive Results** with optimization insights for learning
            
            ## Validation Process
            For each category of prevention rules:
            
            ### Security Validation
            - Input sanitization patterns
            - Authentication/authorization checks
            - XSS/CSRF/injection vulnerability scanning
            - Secure session management
            
            ### Performance Validation
            - N+1 query detection
            - Memory leak patterns
            - Inefficient loops and algorithms
            - Caching strategy compliance
            - Bundle size impact
            
            ### Architecture Validation
            - Dependency coupling analysis
            - Single responsibility adherence
            - API design consistency
            - Component organization patterns
            
            ### Quality Validation
            - Naming conventions
            - Code complexity limits
            - Error handling patterns
            - Documentation completeness
            
            ### Testing Validation
            - Test coverage requirements
            - Edge case handling
            - Integration test completeness
            - Mock strategy consistency
            
            ### Accessibility Validation
            - WCAG compliance
            - ARIA labels and roles
            - Keyboard navigation support
            - Screen reader compatibility
            
            ## Output Requirements
            
            1. **Create violation reports** for each category with issues found
            2. **Generate comprehensive summary** in `prevention-validation-summary.md`
            3. **Update effectiveness metrics** in `.claude/learning/metrics/effectiveness.json`
            4. **Post PR comment** (if this is a PR) with validation results using `gh pr comment`
            5. **Archive results** in `.claude/learning/validations/[date]/` directory
            6. **Commit all changes** using git commands
            
            ## PR Comment Format (if applicable)
            ```markdown
            ## üõ°Ô∏è Prevention Rule Validation Results
            
            **Status**: [‚úÖ PASS / ‚ö†Ô∏è WARNINGS / ‚ùå VIOLATIONS]
            
            ### Summary
            - Rules validated: [count]
            - Issues found: [count]
            - Risk level: [HIGH/MEDIUM/LOW]
            
            ### Issues Found
            [List violations with file locations and recommendations]
            
            ---
            *Powered by compound engineering prevention system*
            ```
            
            Perform complete validation now, including all outputs and PR commenting.
            
          claude_args: '--allowed-tools "Read,Grep,Write,Glob,Bash(git:*),Bash(gh pr:*),Bash(mkdir:*),Bash(date:*)" --files **/*.{js,ts,tsx,jsx,php,py,go,rs,java,rb,swift,kt} --exclude node_modules/** vendor/** dist/** build/**'